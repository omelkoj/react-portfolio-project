{"ast":null,"code":"var _jsxFileName = \"/Users/julia/Documents/FrontEndDevelopementBootcamp/react-portfolio-project/src/TipCalc.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass TipCalc extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      total: \"\",\n      service: \"\",\n      partySize: \"\",\n      totalTip: \"\",\n      tipPP: \"\"\n    };\n\n    this.handleTotal = event => {\n      this.setState({\n        total: event.target.value\n      });\n    };\n\n    this.handleService = event => {\n      this.setState({\n        service: event.target.value\n      });\n    };\n\n    this.handleParty = event => {\n      this.setState({\n        partySize: event.target.value\n      });\n    };\n\n    this.getTip = event => {\n      event.preventDefault(); //prevents page reload upon state change\n\n      let totalTip = parseFloat(this.state.service * this.state.total).toFixed(2);\n    };\n  }\n\n  //controlled form - we set values equal to something in state\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Calculator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"What is your total?\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: this.state.total,\n            onChange: this.handleTotal\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"How was your service?\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: this.state.service,\n            onChange: this.handleService\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"What is your party size?\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: this.state.partySize,\n            onChange: this.handleParty\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default TipCalc;","map":{"version":3,"sources":["/Users/julia/Documents/FrontEndDevelopementBootcamp/react-portfolio-project/src/TipCalc.js"],"names":["React","TipCalc","Component","state","total","service","partySize","totalTip","tipPP","handleTotal","event","setState","target","value","handleService","handleParty","getTip","preventDefault","parseFloat","toFixed","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,OAAN,SAAsBD,KAAK,CAACE,SAA5B,CAAsC;AAAA;AAAA;AAAA,SAEpCC,KAFoC,GAE5B;AACNC,MAAAA,KAAK,EAAE,EADD;AAENC,MAAAA,OAAO,EAAE,EAFH;AAGNC,MAAAA,SAAS,EAAE,EAHL;AAINC,MAAAA,QAAQ,EAAE,EAJJ;AAKNC,MAAAA,KAAK,EAAE;AALD,KAF4B;;AAAA,SAUpCC,WAVoC,GAUrBC,KAAD,IAAW;AACvB,WAAKC,QAAL,CAAc;AACZP,QAAAA,KAAK,EAAEM,KAAK,CAACE,MAAN,CAAaC;AADR,OAAd;AAGD,KAdmC;;AAAA,SAgBpCC,aAhBoC,GAgBnBJ,KAAD,IAAW;AACzB,WAAKC,QAAL,CAAc;AACZN,QAAAA,OAAO,EAAEK,KAAK,CAACE,MAAN,CAAaC;AADV,OAAd;AAGD,KApBmC;;AAAA,SAsBpCE,WAtBoC,GAsBrBL,KAAD,IAAW;AACvB,WAAKC,QAAL,CAAc;AACZL,QAAAA,SAAS,EAAEI,KAAK,CAACE,MAAN,CAAaC;AADZ,OAAd;AAGD,KA1BmC;;AAAA,SA4BpCG,MA5BoC,GA4B1BN,KAAD,IAAW;AAClBA,MAAAA,KAAK,CAACO,cAAN,GADkB,CACM;;AACxB,UAAIV,QAAQ,GAAGW,UAAU,CAAC,KAAKf,KAAL,CAAWE,OAAX,GAAqB,KAAKF,KAAL,CAAWC,KAAjC,CAAV,CAAkDe,OAAlD,CAA0D,CAA1D,CAAf;AACD,KA/BmC;AAAA;;AAiCpC;AACAC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,gCACE;AAAA,yDAEE;AACE,YAAA,IAAI,EAAC,MADP;AAEE,YAAA,KAAK,EAAE,KAAKjB,KAAL,CAAWC,KAFpB;AAGE,YAAA,QAAQ,EAAE,KAAKK;AAHjB;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eASE;AAAA,2DAEE;AACE,YAAA,IAAI,EAAC,MADP;AAEE,YAAA,KAAK,EAAE,KAAKN,KAAL,CAAWE,OAFpB;AAGE,YAAA,QAAQ,EAAE,KAAKS;AAHjB;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBATF,eAiBE;AAAA,8DAEE;AACE,YAAA,IAAI,EAAC,MADP;AAEE,YAAA,KAAK,EAAE,KAAKX,KAAL,CAAWG,SAFpB;AAGE,YAAA,QAAQ,EAAE,KAAKS;AAHjB;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAjBF,eAyBE;AAAO,UAAA,IAAI,EAAC;AAAZ;AAAA;AAAA;AAAA;AAAA,gBAzBF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAgCD;;AAnEmC;;AAsEtC,eAAed,OAAf","sourcesContent":["import React from \"react\";\n\nclass TipCalc extends React.Component {\n  //values, put in state so they can be updated/stored\n  state = {\n    total: \"\",\n    service: \"\",\n    partySize: \"\",\n    totalTip: \"\",\n    tipPP: \"\",\n  };\n\n  handleTotal = (event) => {\n    this.setState({\n      total: event.target.value,\n    });\n  };\n\n  handleService = (event) => {\n    this.setState({\n      service: event.target.value,\n    });\n  };\n\n  handleParty = (event) => {\n    this.setState({\n      partySize: event.target.value,\n    });\n  };\n\n  getTip = (event) => {\n    event.preventDefault(); //prevents page reload upon state change\n    let totalTip = parseFloat(this.state.service * this.state.total).toFixed(2);\n  };\n\n  //controlled form - we set values equal to something in state\n  render() {\n    return (\n      <div>\n        <h1>Calculator</h1>\n        <form>\n          <label>\n            What is your total?\n            <input\n              type=\"text\"\n              value={this.state.total}\n              onChange={this.handleTotal}\n            ></input>\n          </label>\n          <label>\n            How was your service?\n            <input\n              type=\"text\"\n              value={this.state.service}\n              onChange={this.handleService}\n            ></input>\n          </label>\n          <label>\n            What is your party size?\n            <input\n              type=\"text\"\n              value={this.state.partySize}\n              onChange={this.handleParty}\n            ></input>\n          </label>\n          <input type=\"submit\"></input>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default TipCalc;\n"]},"metadata":{},"sourceType":"module"}